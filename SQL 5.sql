use sakila;

-- ------------------------------------------------------------------------------Normalisation & CTE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -- 5. CTE Basics:
        --      a. Write a query using a CTE to retrieve the distinct list of actor names and the number of films they 
          --      have acted in from the actor and film_actor tables.
 WITH actor_film_counts AS (
    SELECT 
        a.actor_id, 
        a.first_name, 
        a.last_name, 
        COUNT(fa.film_id) AS film_count
    FROM actor a
    INNER JOIN film_actor fa ON a.actor_id = fa.actor_id
    GROUP BY a.actor_id, a.first_name, a.last_name
)
SELECT DISTINCT first_name, last_name, film_count
FROM actor_film_counts;
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -- 6. CTE with Joins:
     --           a. Create a CTE that combines information from the film and language tables to display the film title, 
       --          language name, and rental rate.
 WITH film_language AS (
    SELECT 
        f.title, 
        l.name AS language_name, 
        f.rental_rate
    FROM film f
    INNER JOIN language l ON f.language_id = l.language_id
)
SELECT title, language_name, rental_rate
FROM film_language;
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -- 7. CTE for Aggregation:
             --  a. Write a query using a CTE to find the total revenue generated by each customer (sum of payments) 
              --  from the customer and payment tables.
 WITH customer_revenue AS (
    SELECT 
        c.customer_id, 
        c.first_name, 
        c.last_name, 
        SUM(p.amount) AS total_revenue
    FROM customer c
    INNER JOIN payment p ON c.customer_id = p.customer_id
    GROUP BY c.customer_id, c.first_name, c.last_name
)
SELECT first_name, last_name, total_revenue
FROM customer_revenue;
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -- 8. CTE with Window Functions:
             --  a. Utilize a CTE with a window function to rank films based on their rental duration from the film table.
 WITH film_ranks AS (
    SELECT 
        title, 
        rental_duration, 
        RANK() OVER (ORDER BY rental_duration DESC) AS duration_rank
    FROM film
)
SELECT title, rental_duration, duration_rank
FROM film_ranks;
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -- 9. CTE and Filtering:
          --     a. Create a CTE to list customers who have made more than two rentals, and then join this CTE with the 
           -- customer table to retrieve additional customer details.
WITH frequent_renters AS (
    SELECT 
        customer_id, 
        COUNT(rental_id) AS rental_count
    FROM rental
    GROUP BY customer_id
    HAVING COUNT(rental_id) > 2
)
SELECT 
    c.first_name, 
    c.last_name, 
    c.email, 
    fr.rental_count
FROM frequent_renters fr
INNER JOIN customer c ON fr.customer_id = c.customer_id;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 10. CTE for Date Calculations:
 -- a. Write a query using a CTE to find the total number of rentals made each month, considering the 
-- rental_date from the rental table
WITH monthly_rentals AS (
  SELECT
    DATE_FORMAT(rental_date, '%Y-%m') AS rental_month,
    COUNT(rental_id) AS rental_count
  FROM
    rental
  GROUP BY
    rental_month
)
SELECT
  rental_month,
  rental_count
FROM
  monthly_rentals
ORDER BY
  rental_month;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -- 11. CTE and Self-Join:
 -- a. Create a CTE to generate a report showing pairs of actors who have appeared in the same film 
-- together, using the film_actor table.
 WITH actor_pairs AS (
    SELECT 
        fa1.actor_id AS actor1_id, 
        a1.first_name AS actor1_first, 
        a1.last_name AS actor1_last,
        fa2.actor_id AS actor2_id, 
        a2.first_name AS actor2_first, 
        a2.last_name AS actor2_last,
        f.title
    FROM film_actor fa1
    INNER JOIN film_actor fa2 ON fa1.film_id = fa2.film_id AND fa1.actor_id < fa2.actor_id
    INNER JOIN film f ON fa1.film_id = f.film_id
    INNER JOIN actor a1 ON fa1.actor_id = a1.actor_id
    INNER JOIN actor a2 ON fa2.actor_id = a2.actor_id
)
SELECT 
    actor1_first, 
    actor1_last, 
    actor2_first, 
    actor2_last, 
    title
FROM actor_pairs;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 12. CTE for Recursive Search:
 -- a. Implement a recursive CTE to find all employees in the staff table who report to a specific manager, considering the reports_to column 
 WITH RECURSIVE employee_hierarchy AS (
  SELECT
    staff_id,
    first_name,
    last_name,
    manager_id AS reports_to
  FROM
    staff
  WHERE
    manager_id IS NULL
  UNION ALL
  SELECT
    s.staff_id,
    s.first_name,
    s.last_name,
    s.manager_id
  FROM
    staff s
  INNER JOIN employee_hierarchy eh ON s.manager_id = eh.staff_id
)
SELECT
  staff_id,
  first_name,
  last_name,
  reports_to
FROM
  employee_hierarchy;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

