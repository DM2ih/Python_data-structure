use sakila;


-- -------------------------------------------------------------------------WINDOWS FUNCTIONS--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -- 1. Rank the customers based on the total amount they've spent on rentals.
 SELECT 
    c.first_name, 
    c.last_name, 
    SUM(p.amount) AS total_spent,
    RANK() OVER (ORDER BY SUM(p.amount) DESC) AS spending_rank
FROM customer c
INNER JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -- 2. Calculate the cumulative revenue generated by each film over time.
 SELECT 
    f.title, 
    p.payment_date, 
    SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM film f
INNER JOIN inventory i ON f.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
INNER JOIN payment p ON r.rental_id = p.rental_id;
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -- 3. Determine the average rental duration for each film, considering films with similar lengths.
 SELECT 
    title, 
    length, 
    AVG(DATEDIFF(return_date, rental_date)) OVER (PARTITION BY length) AS avg_rental_duration
FROM film f
INNER JOIN inventory i ON f.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
WHERE r.return_date IS NOT NULL;
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -- 4. Identify the top 3 films in each category based on their rental counts.
 WITH
  film_with_rental_count AS (
    SELECT
      f.film_id,
      f.title,
      COUNT(r.rental_id) AS rental_count
    FROM film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY f.film_id, f.title
  ),
  category_rankings AS (
    SELECT
      c.name AS category_name,
      fwrc.title AS film_title,
      fwrc.rental_count,
      ROW_NUMBER() OVER (
        PARTITION BY c.category_id
        ORDER BY fwrc.rental_count DESC
      ) AS rank_in_category
    FROM film_with_rental_count fwrc
    JOIN film_category fc ON fwrc.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
  )
SELECT
  category_name,
  film_title,
  rental_count
FROM category_rankings
WHERE rank_in_category <= 3
ORDER BY category_name, rental_count DESC;

 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -- 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
 
 WITH customer_rentals AS (
    SELECT 
        c.customer_id, 
        c.first_name, 
        c.last_name, 
        COUNT(r.rental_id) AS rental_count,
        AVG(COUNT(r.rental_id)) OVER () AS avg_rentals
    FROM customer c
    LEFT JOIN rental r ON c.customer_id = r.customer_id
    GROUP BY c.customer_id, c.first_name, c.last_name
)
SELECT 
    first_name, 
    last_name, 
    rental_count, 
    rental_count - avg_rentals AS difference_from_avg
FROM customer_rentals;
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -- 6. Find the monthly revenue trend for the entire rental store over time.
 SELECT
    DATE_FORMAT(payment_date, '%Y-%m') AS month,
    SUM(amount) AS monthly_revenue
FROM
    payment
GROUP BY
    month
ORDER BY
    month;
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -- 7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.
 WITH customer_spending AS (
    SELECT 
        c.customer_id, 
        c.first_name, 
        c.last_name, 
        SUM(p.amount) AS total_spent,
        NTILE(5) OVER (ORDER BY SUM(p.amount) DESC) AS spending_quintile
    FROM customer c
    INNER JOIN payment p ON c.customer_id = p.customer_id
    GROUP BY c.customer_id, c.first_name, c.last_name
)
SELECT first_name, last_name, total_spent
FROM customer_spending
WHERE spending_quintile = 1;
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -- 8. Calculate the running total of rentals per category, ordered by rental count.
 SELECT 
    c.name AS category, 
    COUNT(r.rental_id) AS rental_count,
    SUM(COUNT(r.rental_id)) OVER (PARTITION BY c.category_id ORDER BY COUNT(r.rental_id) DESC) AS running_total
FROM category c
INNER JOIN film_category fc ON c.category_id = fc.category_id
INNER JOIN film f ON fc.film_id = f.film_id
INNER JOIN inventory i ON f.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY c.category_id, c.name;
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -- 9. Find the films that have been rented less than the average rental count for their respective categories.
 WITH film_rentals AS (
    SELECT 
        c.name AS category, 
        f.title, 
        COUNT(r.rental_id) AS rental_count,
        AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.category_id) AS avg_rental_count
    FROM category c
    INNER JOIN film_category fc ON c.category_id = fc.category_id
    INNER JOIN film f ON fc.film_id = f.film_id
    INNER JOIN inventory i ON f.film_id = i.film_id
    INNER JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY c.category_id, c.name, f.film_id, f.title
)
SELECT category, title, rental_count
FROM film_rentals
WHERE rental_count < avg_rental_count;
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -- 10. Identify the top 5 months with the highest revenue and display the revenue generated in each month
 SELECT
    DATE_FORMAT(payment_date, '%Y-%m') AS month,
    SUM(amount) AS monthly_revenue
FROM
    payment
GROUP BY
    month
ORDER BY
    monthly_revenue DESC
LIMIT 5;
 
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 